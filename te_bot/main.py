import asyncio
import re
import time

import requests
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor

import keyboards as kb
import storage as connect
from states import Form

API_TOKEN = '584143393:AAED-5U6R6XHoMtONSuLt_s2VE0v32TT_04'

loop = asyncio.get_event_loop()
bot = Bot(token=API_TOKEN, loop=loop)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
connect_manager = connect.Storage()


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç, —Å —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?",
                        reply_markup=kb.inline_kb_start)
    await Form.idle.set()


@dp.callback_query_handler(lambda c: c.data == 'button_reg',
                           state=Form.idle)
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await Form.login_reg.set()

    await bot.send_message(callback_query.from_user.id,
                           '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω')


@dp.message_handler(state=Form.login_reg)
async def process_login(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['login_reg'] = message.text

    await Form.password_reg.set()
    await message.reply("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")


@dp.message_handler(state=Form.password_reg)
async def process_password(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['password_reg'] = message.text

    await message.reply("–ü—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è...")

    async with state.proxy() as data:
        login = data['login_reg']
        password = data['password_reg']
        API_ENDPOINT = "http://127.0.0.1:8000/polyana/api/registration/"
        credentials = {'nickname': login, 'password': password}
        r = requests.post(API_ENDPOINT, credentials)
        Answ = re.compile(r'{"([a-zA-z]*)')
        Answ = Answ.search(r.text)
        Answ = Answ.group(1)
        time.sleep(0.2)

        if Answ == 'response':
            time.sleep(0.2)

            await bot.send_message(message.chat.id,
                                   text="–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

            if await authentication(message.chat.id, login, password):
                time.sleep(0.1)

                await message.reply("–£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!",
                                    reply_markup=kb.inline_kb_battle)

                await Form.authenticated_idle.set()
            else:
                await message.reply("–í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è!",
                                    reply_markup=kb.inline_kb_start)
                await Form.idle.set()
        else:
            await bot.send_message(
                message.chat.id,
                text=("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å " +
                      "—Ç–∞–∫–∏–º –Ω–∏–∫–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"),
                reply_markup=kb.inline_kb_start)

            await Form.idle.set()


@dp.callback_query_handler(lambda c: c.data == 'button_auth',
                           state=Form.idle)
async def process_callback_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await Form.login_auth.set()
    await bot.send_message(callback_query.from_user.id, '–í—Ö–æ–¥: –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω')


@dp.message_handler(state=Form.login_auth)
async def process_login_auth(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['login'] = message.text

    await Form.password_auth.set()
    await bot.send_message(message.chat.id, "–í—Ö–æ–¥: –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")


@dp.message_handler(state=Form.password_auth)
async def process_password_auth(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['password'] = message.text

    await Form.next()
    await message.reply("–í—Ö–æ–¥–∏–º...")

    async with state.proxy() as data:
        login = data['login']
        password = data['password']

        if await authentication(message.chat.id, login, password):
            time.sleep(0.1)

            await bot.send_message(message.chat.id,
                                   "–£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!",
                                   reply_markup=kb.inline_kb_battle)

            await Form.authenticated_idle.set()
        else:
            await bot.send_message(message.chat.id,
                                   "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!",
                                   reply_markup=kb.inline_kb_start)
            await Form.idle.set()


@dp.callback_query_handler(lambda c: c.data == 'button_battle',
                           state=Form.authenticated_idle)
async def process_callback_button_battle(callback_query: types.CallbackQuery,
                                         state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await Form.reg_battle_bid.set()

    async with state.proxy() as data:
        data['battle_type'] = 'head_to_head'

    await bot.send_message(callback_query.from_user.id,
                           '–í—Ö–æ–¥–∏–º –≤ –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É...')

    await bot.send_message(callback_query.from_user.id,
                           '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É')


@dp.callback_query_handler(lambda c: c.data == 'button_royale',
                           state=Form.authenticated_idle)
async def process_callback_button_royale(callback_query: types.CallbackQuery,
                                         state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await Form.reg_battle_bid.set()

    async with state.proxy() as data:
        data['battle_type'] = 'battle_royale'

    await bot.send_message(callback_query.from_user.id,
                           '–í—Ö–æ–¥–∏–º –≤ –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É...')

    await bot.send_message(callback_query.from_user.id,
                           '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É')


@dp.message_handler(lambda message: not message.text.isdigit(),
                    state=Form.reg_battle_bid)
async def failed_process_bid(message: types.Message):
    return await message.reply("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!.\n" +
                               "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É")


@dp.message_handler(lambda message: message.text.isdigit(),
                    state=Form.reg_battle_bid)
async def process_reg_battle_bid(message: types.Message, state: FSMContext):
    await Form.reg_battle_currency.set()
    await state.update_data(reg_battle_bid=int(message.text))

    await message.reply("–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ —Å—Ç–∞–≤–∏–º?",
                        reply_markup=kb.inline_kb_currency)


@dp.message_handler(state=Form.move)
async def process_battle_waiting(message: types.Message, state: FSMContext):
    await message.reply("–ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ üëàüëÜüëáüëâ")


@dp.message_handler(state=Form.reg_battle)
async def process_battle_waiting(message: types.Message, state: FSMContext):
    await message.reply("–û–∂–∏–¥–∞–µ–º –Ω–∞—á–∞–ª–æ –±–æ—è...")


@dp.callback_query_handler(lambda c: c.data == 'currency_silver',
                           state=Form.reg_battle_currency)
async def process_silver(callback_query, state: FSMContext):
    await Form.reg_battle.set()

    await bot.send_message(callback_query.from_user.id,
                           "–ü—Ä–æ–±—É–µ–º –Ω–∞—á–∞—Ç—å –±–æ–π...")

    tn = connect_manager.get_connect(callback_query.from_user.id)
    time.sleep(0.1)

    async with state.proxy() as data:
        data['reg_battle_currency'] = 'SILVER'

        data['reg_battle'] = True
        bid = data['reg_battle_bid']
        currency = data['reg_battle_currency']

        if data['battle_type'] == 'battle_royale':
            tn.write(b'ROYALE ' + str(bid).encode('ascii') + b' ' +
                     currency.encode('ascii') + b'\r\n')
        else:  # head_to_head
            tn.write(b'BATTLE ' + str(bid).encode('ascii') + b' ' +
                     currency.encode('ascii') + b'\r\n')

    time.sleep(0.1)
    await check_oponent(callback_query.from_user.id)


@dp.callback_query_handler(lambda c: c.data == 'currency_gold',
                           state=Form.reg_battle_currency)
async def process_silver(callback_query, state: FSMContext):
    await Form.reg_battle.set()

    await bot.send_message(callback_query.from_user.id,
                           "–ü—Ä–æ–±—É–µ–º –Ω–∞—á–∞—Ç—å –±–æ–π...")

    async with state.proxy() as data:
        data['reg_battle_currency'] = 'GOLD'

        data['reg_battle'] = True
        bid = data['reg_battle_bid']
        currency = data['reg_battle_currency']

    tn = connect_manager.get_connect(callback_query.from_user.id)
    time.sleep(0.1)

    tn.write(b'BATTLE ' + str(bid).encode('ascii') + b' ' +
             currency.encode('ascii') + b'\r\n')

    time.sleep(0.1)
    await check_oponent(callback_query.from_user.id)


async def authentication(chat_id, login, password):
    connect_manager.add_connect(chat_id)
    tn = connect_manager.get_connect(chat_id)
    time.sleep(0.2)

    tn.write(b'AUTH ' + login.encode('ascii') + b' ' +
             password.encode('ascii') + b'\r\n')

    time.sleep(0.2)
    answ1 = tn.read_eager()

    if answ1 == b'SUCCESS\n':
        return True
    else:
        return False


async def get_battle_map(answ1, id):
    tn = connect_manager.get_connect(id)
    answ = tn.read_eager()
    battle_map = answ1 + answ
    found_battle = True
    while found_battle:
        while answ != b'':
            answ = tn.read_eager()
            time.sleep(0.2)
            battle_map += answ
        else:
            if b'Congratulations!' in battle_map.split():
                await re_battle(id, battle_map)
                await Form.authenticated_idle.set()
            else:
                battle_map = render_battle_map(battle_map)

                if battle_map != '':
                    if (battle_map != 'NOT YOUR MOVE! WAIT PLEASE!') and \
                            (battle_map != 'ERROR, please try once more'):
                        await bot.send_message(id,
                                               battle_map,
                                               reply_markup=kb.inline_kb_move)

                        await Form.move.set()
                        await check_oponent(id)
                    else:
                        await bot.send_message(id,
                                               battle_map,
                                               reply_markup=kb.inline_kb_move)

                        await Form.move.set()

        await asyncio.sleep(0.2)
        found_battle = False


async def check_oponent(id):
    tn = connect_manager.get_connect(id)
    battle_map = b''
    while battle_map == b'' or \
            battle_map == b'Searching the opponent...\n' or \
            battle_map == b'TO BATTLE!\n':
        answ = tn.read_eager()
        battle_map = answ

        while answ != b'' and answ != b'Searching the opponent...\n':
            if answ == b'TO BATTLE!\n':
                await bot.send_message(id, "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏, –æ–∂–∏–¥–∞–π—Ç–µ")
                answ = tn.read_eager()
                time.sleep(0.2)
            elif answ == b'YOU HAVE NOT ENOUGH MONEY\n':
                await bot.send_message(id,
                                       "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥",
                                       reply_markup=kb.inline_kb_battle)

                await Form.authenticated_idle.set()
                return
            else:
                answ = tn.read_eager()
                time.sleep(0.2)
                battle_map += answ
        await asyncio.sleep(0.2)
    else:
        if b'Congratulations!' in battle_map.split():
            await re_battle(id, battle_map)
            await Form.authenticated_idle.set()
        else:
            await get_battle_map(battle_map, id)


def render_battle_map(battle_map):
    battle_map = battle_map.decode('ascii')
    battle_map = battle_map.replace(' A ', 'üòé')
    battle_map = battle_map.replace(' B ', 'üòà')
    battle_map = battle_map.replace(' C ', 'üò±')
    battle_map = battle_map.replace(' D ', 'üò∏')
    battle_map = battle_map.replace('player A', 'player üòé')
    battle_map = battle_map.replace('player B', 'player üòà')
    battle_map = battle_map.replace('player C', 'player üò±')
    battle_map = battle_map.replace('player D', 'player üò∏')
    battle_map = battle_map.replace('A wins', 'üòé wins')
    battle_map = battle_map.replace('B wins', 'üòà wins')
    battle_map = battle_map.replace('C wins', 'üò± wins')
    battle_map = battle_map.replace('D wins', 'üò∏ wins')
    battle_map = battle_map.replace(' X ', 'üí©')
    battle_map = battle_map.replace(' F ', 'üí©')
    battle_map = battle_map.replace('   ', 'üåé')
    battle_map = battle_map.replace('|', '')
    battle_map = battle_map.replace('-', '')

    return battle_map


async def re_battle(id, battle_map):
    await Form.next()
    await bot.send_message(id,
                           render_battle_map(battle_map),
                           reply_markup=kb.inline_kb_battle)


@dp.callback_query_handler(lambda c: c.data == 'button_up', state=Form.move)
async def process_callback_button_up(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    tn = connect_manager.get_connect(callback_query.from_user.id)
    tn.write(b'u\r\n')
    time.sleep(0.2)
    await get_battle_map(b'', callback_query.from_user.id)


@dp.callback_query_handler(lambda c: c.data == 'button_left', state=Form.move)
async def process_callback_button_left(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    tn = connect_manager.get_connect(callback_query.from_user.id)
    tn.write(b'l\r\n')
    time.sleep(0.2)
    await get_battle_map(b'', callback_query.from_user.id)


@dp.callback_query_handler(lambda c: c.data == 'button_right', state=Form.move)
async def process_callback_button_right(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    tn = connect_manager.get_connect(callback_query.from_user.id)
    tn.write(b'r\r\n')
    time.sleep(0.2)
    await get_battle_map(b'', callback_query.from_user.id)


@dp.callback_query_handler(lambda c: c.data == 'button_down', state=Form.move)
async def process_callback_button_down(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    tn = connect_manager.get_connect(callback_query.from_user.id)
    tn.write(b'd\r\n')
    time.sleep(0.2)
    await get_battle_map(b'', callback_query.from_user.id)


@dp.callback_query_handler(lambda c: c.data == 'button_quit',
                           state='*')
async def process_callback_button_quit(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    await bot.send_message(callback_query.from_user.id,
                           "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")

    tn = connect_manager.get_connect(callback_query.from_user.id)

    if tn:
        tn.close()

    await Form.idle.set()


@dp.callback_query_handler(state='*')
async def process_callback_button_quit(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ.")


@dp.message_handler(state=Form.authenticated_idle)
async def process_idle_typing(message: types.Message, state: FSMContext):
    await message.reply("–õ–µ—Ü –±–∞—Ç–ª", reply_markup=kb.inline_kb_battle)


@dp.message_handler(state='*')
async def process_idle_typing(message: types.Message, state: FSMContext):
    await cmd_start(message)


if __name__ == '__main__':
    executor.start_polling(dp, loop=loop, skip_updates=True)
